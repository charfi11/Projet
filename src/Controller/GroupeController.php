<?php

namespace App\Controller;

use App\Entity\User;
use App\Entity\Groupe;
use App\Entity\Invite;
use App\Form\EventType;
use App\Form\InviteType;
use App\Entity\Evenement;
use App\Form\EditGroupeType;
use App\Form\InvitationType;
use App\Repository\UserRepository;
use App\Repository\GroupeRepository;
use App\Repository\InviteRepository;
use Symfony\Component\Serializer\Serializer;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Serializer\Encoder\JsonEncoder;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Entity;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Normalizer\AbstractNormalizer;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;

class GroupeController extends AbstractController
{
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/groupe/{id}", name="yourGroupe")
     */
    public function groupePage($id, Groupe $grp, GroupeRepository $groupeRepo, UserRepository $userrepo,
        Request $request){

        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        $entityManager = $this->getDoctrine()->getManager();

        $yourGroupe = $groupeRepo->find($id);
        $users = $userrepo->findAll();
        $user = $grp->getUsers();

        $formGrp = $this->createForm(EditGroupeType::class, $grp);
        $formGrp->handleRequest($request);

        $invite = new Invite();
        $formMember = $this->createForm(InvitationType::class, $invite);
        $formMember->handleRequest($request);

        $groupeEvent = new Evenement();
        $formEv = $this->createForm(EventType::class, $groupeEvent);
        $formEv->handleRequest($request);

        if($formGrp->isSubmitted() && $formGrp->isValid()){

            $entityManager->persist($grp);
            $entityManager->flush();

            return $this->redirectToRoute('index');
        }

        if($request->isXmlHttpRequest()){
            
            $encoders = [new JsonEncoder()];
            $normalizers = [new ObjectNormalizer()];
            $serializer = new Serializer($normalizers, $encoders);
            $data = $serializer->serialize($groupeEvent, 'json');
            $groupeEvent->setGroupe($grp);

            $entityManager->persist($groupeEvent);
            $entityManager->flush();

            return $response = new JsonResponse(['data' => $data]); // a revoir plus tard, une seul key json

        }

        if($formMember->isSubmitted() && $formMember->isValid()){

          $members = $request->request->get('invitation')['users'];
           foreach($members as $members_id){
            $user_id = $userrepo->find($members_id);
            $invite->addUser($user_id);
           }
           $invite->addGroupe($grp);

           $entityManager->persist($invite);
           $entityManager->flush();

           return $this->redirectToRoute('yourGroupe', ['id' => $grp->getId()]);

        }

        return $this->render('groupe/groupePage.html.twig', [
         'yourgrp' => $yourGroupe,
         'user' => $user,
         'users' => $users,
         'formGrpe' => $formGrp->createView(),
         'MemberType' => $formMember->createView(),
         'FormEvent' => $formEv->createView()
        ]);
    }

    /**
     * @Route("/groupe/{id}/deletegroupe", name="deletegrp")
     */
     public function deleteGrp($id, Groupe $groupe){

        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        $entityManager = $this->getDoctrine()->getManager();

        $entityManager->remove($groupe);
        $entityManager->flush();
        
        return $this->redirectToRoute('myspace');
     }

     /**
      * @Route("groupe/{id}/deleteinvitegrp", name="deleteinvitegrp")
      */

      public function deleteInvite($id, Grouperepository $gi, UserRepository $ur, Request $request){

        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        $entityManager = $this->getDoctrine()->getManager();

        $g = $gi->find($id);
        $i = $g->getInvites();
        $r = $request->query->get('id');
        $iu = $ur->find($r);

        foreach($i as $k){
            $u = $k->getUsers();
            foreach($u as $z){
                if($iu === $z){
                $z->removeInvite($k);
                }
            }
        };

         $entityManager->flush();

          return New JsonResponse();

      }

      /**
     * @Route("groupe/{id}/deletegrpuser/{userid}", name="deleteuseringrp")
     * @Entity("user", expr="repository.find(userid)")
     */
     public function deleteGrpUser($id, Groupe $g, User $userid){

        $this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');

        $entityManager = $this->getDoctrine()->getManager();

             $g->removeUser($userid);
             $entityManager->flush();
        
        return $this->redirectToRoute('yourGroupe', ['id' => $id]);
     }


}
